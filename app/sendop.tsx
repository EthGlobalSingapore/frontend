import React from "react";
import {
  type UseSendUserOperationResult,
  useSendUserOperation,
  useSmartAccountClient,
} from "@account-kit/react";
import { decodeEventLog, encodeFunctionData, Hex, parseAbi } from "viem";
import { UserOperationRequest_v6, UserOperationRequest_v7 } from "@aa-sdk/core";
 
export default function MyOpSenderComponent() {
  const { client } = useSmartAccountClient({ type: "MultiOwnerModularAccount" });

  // console.log(await client?.readOwners());

  const abi = parseAbi([
    'function greet() public view returns (string memory)',
    'function setGreeting(string memory _greeting) public',
    'function createGreeter(string memory _greeting, bytes32 _salt) public'
  ])

  const eventAbi = parseAbi([
    'event GreeterCreated(address greeterAddress)'
  ]);

  const cd = encodeFunctionData({
    abi: abi,
    functionName: "createGreeter",
    args: ["eth global", "0x33b68A8466e2aC0eFef4eFCFF4060C1B80A235e1100234200000000000000000"],
  })

  client?.installPlugin({
    pluginAddress: "0x...",
    manifestHash: "0x...",
    dependencies: [], // this is defined by the plugin you're installing
  });
 
  const { sendUserOperation, isSendingUserOperation } = useSendUserOperation({
    client,
    // optional parameter that will wait for the transaction to be mined before returning
    waitForTxn: true,
    onSuccess: async ({ hash, request }) => {
      console.log(hash);

      // let address: Hex = "0xb7c8ba8ef5a638a1d21402d3aff99401c74f6ba9";

      // console.log("Transaction hash:", hash);
      const receipt = await client?.getTransactionReceipt({hash});
      console.log(receipt);

      let greeterAddress: Hex | undefined = "0xb7c8ba8ef5a638a1d21402d3aff99401c74f6ba9";

      if (receipt) {
        const logs = receipt?.logs
        .map((log) => {
          try {
            const decoded = decodeEventLog({
              abi: eventAbi,
              data: log.data,
              topics: log.topics
            });

            console.log(decoded);

            // return decoded.eventName === "GreeterCreated";

            if (decoded.eventName === "GreeterCreated") {
              return decoded.args.greeterAddress;
            }

          } catch (e) {
            // console.error(e);
            // return false
          }
        });

        console.log(logs);

        greeterAddress = logs.find((log) => log !== undefined);
      }

      // console.log(receipt?.contractAddress);
      // if (receipt?.contractAddress) {
      //   console.log("New contract address:", receipt.contractAddress);
      //   address = receipt.contractAddress;
      // } else {
      //   console.log("Contract address not found in receipt. Using fallback", address);
      // }

      const res = await client?.readContract({
        address: greeterAddress ?? "0xb7c8ba8ef5a638a1d21402d3aff99401c74f6ba9",
        abi: abi,
        functionName: "greet",
      });
      console.log(res);
    },
    onError: async (e, request) => {
      console.error(e);
      // const { hash: newHash } = await client?.dropAndReplaceUserOperation({
      //   uoToDrop: request as unknown as UserOperationRequest_v6 | UserOperationRequest_v7,
      // }) as { hash: string };

      // console.log('retrying', newHash)
     
      // // 4. wait for the new user operation to be mined
      // await client?.waitForUserOperationTransaction({ hash: newHash as Hex });
    },
  });
 
  return (
    <div>
      <button
        onClick={() =>
          sendUserOperation({
            uo: [
              {
                target: "0x5b54e75efc36f4b0DFa5D822aAA2b3A7a0b683e6",
                data: cd,
                value: 0n,
              },
              // {
              //   target: "0x0000000000000000000000000000000000000000", // Target is zero address for contract creation
              //   data: "0x608060405234801561000f575f80fd5b50604051610af2380380610af283398181016040528101906100319190610193565b805f908161003f91906103e7565b50506104b6565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6100a58261005f565b810181811067ffffffffffffffff821117156100c4576100c361006f565b5b80604052505050565b5f6100d6610046565b90506100e2828261009c565b919050565b5f67ffffffffffffffff8211156101015761010061006f565b5b61010a8261005f565b9050602081019050919050565b8281835e5f83830152505050565b5f610137610132846100e7565b6100cd565b9050828152602081018484840111156101535761015261005b565b5b61015e848285610117565b509392505050565b5f82601f83011261017a57610179610057565b5b815161018a848260208601610125565b91505092915050565b5f602082840312156101a8576101a761004f565b5b5f82015167ffffffffffffffff8111156101c5576101c4610053565b5b6101d184828501610166565b91505092915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061022857607f821691505b60208210810361023b5761023a6101e4565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261029d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610262565b6102a78683610262565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6102eb6102e66102e1846102bf565b6102c8565b6102bf565b9050919050565b5f819050919050565b610304836102d1565b610318610310826102f2565b84845461026e565b825550505050565b5f90565b61032c610320565b6103378184846102fb565b505050565b5b8181101561035a5761034f5f82610324565b60018101905061033d565b5050565b601f82111561039f5761037081610241565b61037984610253565b81016020851015610388578190505b61039c61039485610253565b83018261033c565b50505b505050565b5f82821c905092915050565b5f6103bf5f19846008026103a4565b1980831691505092915050565b5f6103d783836103b0565b9150826002028217905092915050565b6103f0826101da565b67ffffffffffffffff8111156104095761040861006f565b5b6104138254610211565b61041e82828561035e565b5f60209050601f83116001811461044f575f841561043d578287015190505b61044785826103cc565b8655506104ae565b601f19841661045d86610241565b5f5b828110156104845784890151825560018201915060208501945060208101905061045f565b868310156104a1578489015161049d601f8916826103b0565b8355505b6001600288020188555050505b505050505050565b61062f806104c35f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c8063a413686214610038578063cfae321714610054575b5f80fd5b610052600480360381019061004d9190610260565b610072565b005b61005c610084565b6040516100699190610307565b60405180910390f35b805f9081610080919061052a565b5050565b60605f805461009290610354565b80601f01602080910402602001604051908101604052809291908181526020018280546100be90610354565b80156101095780601f106100e057610100808354040283529160200191610109565b820191905f5260205f20905b8154815290600101906020018083116100ec57829003601f168201915b5050505050905090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6101728261012c565b810181811067ffffffffffffffff821117156101915761019061013c565b5b80604052505050565b5f6101a3610113565b90506101af8282610169565b919050565b5f67ffffffffffffffff8211156101ce576101cd61013c565b5b6101d78261012c565b9050602081019050919050565b828183375f83830152505050565b5f6102046101ff846101b4565b61019a565b9050828152602081018484840111156102205761021f610128565b5b61022b8482856101e4565b509392505050565b5f82601f83011261024757610246610124565b5b81356102578482602086016101f2565b91505092915050565b5f602082840312156102755761027461011c565b5b5f82013567ffffffffffffffff81111561029257610291610120565b5b61029e84828501610233565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f6102d9826102a7565b6102e381856102b1565b93506102f38185602086016102c1565b6102fc8161012c565b840191505092915050565b5f6020820190508181035f83015261031f81846102cf565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061036b57607f821691505b60208210810361037e5761037d610327565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026103e07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826103a5565b6103ea86836103a5565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f61042e61042961042484610402565b61040b565b610402565b9050919050565b5f819050919050565b61044783610414565b61045b61045382610435565b8484546103b1565b825550505050565b5f90565b61046f610463565b61047a81848461043e565b505050565b5b8181101561049d576104925f82610467565b600181019050610480565b5050565b601f8211156104e2576104b381610384565b6104bc84610396565b810160208510156104cb578190505b6104df6104d785610396565b83018261047f565b50505b505050565b5f82821c905092915050565b5f6105025f19846008026104e7565b1980831691505092915050565b5f61051a83836104f3565b9150826002028217905092915050565b610533826102a7565b67ffffffffffffffff81111561054c5761054b61013c565b5b6105568254610354565b6105618282856104a1565b5f60209050601f831160018114610592575f8415610580578287015190505b61058a858261050f565b8655506105f1565b601f1984166105a086610384565b5f5b828110156105c7578489015182556001820191506020850194506020810190506105a2565b868310156105e457848901516105e0601f8916826104f3565b8355505b6001600288020188555050505b50505050505056fea264697066735822122059c4ae80890fe724e3ac359c53d0c9b8a4a00c8a3c4c78d5154d8207fbae61e564736f6c634300081a0033",
              //   value: 0n,
              // }
          ],
          overrides: {
            // callGasLimit: 1000000n,
            maxPriorityFeePerGas: 50000000000n,
            maxFeePerGas: 2000000000000n,
          },
          })
        }
        disabled={isSendingUserOperation}
      >
        {isSendingUserOperation ? "Sending..." : "Send UO"}
      </button>
    </div>
  );
}